/* kv_interface.cpp
* 03/13/2017
* by Mian Qin
*/

#include <sys/time.h>
#include "kv_device.h"

//#define IO_DEBUG

#ifdef IO_DEBUG
struct timeval tp;
extern long int ts;
#endif

bool KV_DEVICE::kv_store(phy_key *key, phy_val *value)
{
    kvs_store_option option;
    option.st_type = KVS_STORE_POST;
    option.kvs_store_compress = false;
        
    const kvs_store_context put_ctx = {option, 0, 0};
    const kvs_key  kvskey = { key->c_key, key->get_klen()};
    const kvs_value kvsvalue = { value->c_val, value->val_len, 0, 0 /*offset */};
    int ret = kvs_store_tuple(cont_handle, &kvskey, &kvsvalue, &put_ctx);

    if (ret != KVS_SUCCESS) {
        printf("STORE tuple failed with err %s\n", kvs_errstr(ret));
        exit(1);
    }

#ifdef IO_DEBUG
    gettimeofday(&tp, NULL);
    printf("[%.6f] kv_device:insert key: %s, value: %s\n", ((float)(tp.tv_sec*1000000 + tp.tv_usec - ts)) / 1000000 ,ckey, cval);
#endif
    return true;
		
}


bool KV_DEVICE::kv_delete(phy_key *key)
{
    const kvs_key  kvskey = { key->c_key, key->get_klen()};
    const kvs_delete_context del_ctx = { {true}, 0, 0};
    int ret = kvs_delete_tuple(cont_handle, &kvskey, &del_ctx);

    if(ret != KVS_SUCCESS) {
        printf("delete tuple failed with error 0x%x - %s, key %s\n", ret, kvs_errstr(ret), key->c_key);
        exit(1);
    }
    
#ifdef IO_DEBUG
    gettimeofday(&tp, NULL);
    printf("[%.6f] kv_device:delete key: %s\n",((float)(tp.tv_sec*1000000 + tp.tv_usec - ts)) / 1000000 , ckey);
#endif    
    return true;
}

bool KV_DEVICE::kv_get(phy_key *key, phy_val *value)
{
    const kvs_key  kvskey = { key->c_key, key->get_klen() };
    kvs_value *kvsvalue = new kvs_value{ value->c_val, value->val_len , 0, 0 /*offset */};
    kvs_retrieve_option option;
    memset(&option, 0, sizeof(kvs_retrieve_option));
    option.kvs_retrieve_decompress = false;
    option.kvs_retrieve_delete = false;
    const kvs_retrieve_context ret_ctx = {option, 0, 0};
    int ret = kvs_retrieve_tuple(cont_handle, &kvskey, kvsvalue, &ret_ctx);
    if(ret != KVS_SUCCESS) {
        printf("retrieve tuple %s failed with error 0x%x - %s,\n", key->c_key, ret, kvs_errstr(ret));
        exit(1);
    }
    value->actual_len = kvsvalue->actual_value_size;
#ifdef IO_DEBUG
    gettimeofday(&tp, NULL);
    printf("[%.6f] kv_device:get key: %s, value: %s\n",((float)(tp.tv_sec*1000000 + tp.tv_usec - ts)) / 1000000 , ckey, ret);
#endif       
    return true;

}

bool KV_DEVICE::kv_astore(phy_key *key, phy_val *value, void (*callback)(void *), void *argument)
{
    dev_io_context *dev_ctx = new dev_io_context{KVD_STORE, key, value, callback, argument, this};
    sem_wait(&q_sem);
    if (threadpool_add(pool, &io_task, dev_ctx, 0) < 0) {
        printf("kv insert pool_add error, key %s\n", key->c_key);
        exit(1);
    }
    return true;
}


bool KV_DEVICE::kv_adelete(phy_key *key, void (*callback)(void *), void *argument)
{
    dev_io_context *dev_ctx = new dev_io_context{KVD_DELETE, key, NULL, callback, argument, this};
    sem_wait(&q_sem);
    if (threadpool_add(pool, &io_task, dev_ctx, 0) < 0) {
        printf("kv delete pool_add error, key %s\n", key->c_key);
        exit(1);
    }
    return true;
}

bool KV_DEVICE::kv_aget(phy_key *key, phy_val *value, void (*callback)(void *), void *argument)
{
    dev_io_context *dev_ctx = new dev_io_context{KVD_GET, key, value, callback, argument, this};
    sem_wait(&q_sem);
    if (threadpool_add(pool, &io_task, dev_ctx, 0) < 0) {
        printf("kv get pool_add error, key %s\n", key->c_key);
        exit(1);
    }
    return true;
}

int64_t KV_DEVICE::get_capacity() {
    int64_t dev_cap;
    kvs_get_device_capacity(dev, &dev_cap);
    return dev_cap;
}

double KV_DEVICE::get_util() {
    int dev_util;
    kvs_get_device_utilization(dev, &dev_util);
    return (double)dev_util/10000;
}

float KV_DEVICE::get_waf() {
    //return kvs_get_waf(dev);
    return 0;
}


static void io_task(void *arg) {
    dev_io_context* ctx = (dev_io_context *)arg;
    int ret;
    switch (ctx->ops) {
        case KVD_STORE: {
            ctx->dev->kv_store(ctx->key, ctx->value);
            break;
        }
        case KVD_DELETE: {
            ctx->dev->kv_delete(ctx->key);
            break;

        }
        case KVD_GET: {
            ctx->dev->kv_get(ctx->key, ctx->value);
            break;
        }
        default: printf("op_task ops wrong\n");
    }
    if (ctx->callback != NULL)
        ctx->callback(ctx->argument);
    delete ctx;
    
}
